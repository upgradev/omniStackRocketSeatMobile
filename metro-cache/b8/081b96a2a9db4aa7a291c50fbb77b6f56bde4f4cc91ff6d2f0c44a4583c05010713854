{"dependencies":[{"name":"../parse/index.js","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var parse = _$$_REQUIRE(_dependencyMap[0], \"../parse/index.js\");\n\n  function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n    if (!(dirtyDatesArray instanceof Array)) {\n      throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array');\n    }\n\n    var dateToCompare = parse(dirtyDateToCompare);\n    var timeToCompare = dateToCompare.getTime();\n    var result;\n    var minDistance;\n    dirtyDatesArray.forEach(function (dirtyDate) {\n      var currentDate = parse(dirtyDate);\n      var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n      if (result === undefined || distance < minDistance) {\n        result = currentDate;\n        minDistance = distance;\n      }\n    });\n    return result;\n  }\n\n  module.exports = closestTo;\n});","map":[[2,0,1,0],[2,6,1,4,"parse"],[2,11,1,9],[2,14,1,12,"require"],[2,25,1,19],[2,65,1,0],[4,0,24,0],[4,11,24,9,"closestTo"],[4,20,24,0],[4,21,24,20,"dirtyDateToCompare"],[4,39,24,0],[4,41,24,40,"dirtyDatesArray"],[4,56,24,0],[4,58,24,57],[5,0,25,2],[5,8,25,6],[5,10,25,8,"dirtyDatesArray"],[5,25,25,23],[5,37,25,35,"Array"],[5,42,25,6],[5,43,25,2],[5,45,25,43],[6,0,26,4],[6,12,26,10],[6,16,26,14,"TypeError"],[6,25,26,10],[6,26,26,24,"toString"],[6,34,26,32],[6,35,26,33,"call"],[6,39,26,24],[6,40,26,38,"dirtyDatesArray"],[6,55,26,24],[6,59,26,57],[6,89,26,10],[6,90,26,4],[7,0,27,3],[9,0,29,2],[9,8,29,6,"dateToCompare"],[9,21,29,19],[9,24,29,22,"parse"],[9,29,29,27],[9,30,29,28,"dirtyDateToCompare"],[9,48,29,27],[9,49,29,2],[10,0,30,2],[10,8,30,6,"timeToCompare"],[10,21,30,19],[10,24,30,22,"dateToCompare"],[10,37,30,35],[10,38,30,36,"getTime"],[10,45,30,22],[10,47,30,2],[11,0,32,2],[11,8,32,6,"result"],[11,14,32,2],[12,0,33,2],[12,8,33,6,"minDistance"],[12,19,33,2],[13,0,35,2,"dirtyDatesArray"],[13,4,35,2,"dirtyDatesArray"],[13,19,35,17],[13,20,35,18,"forEach"],[13,27,35,2],[13,28,35,26],[13,38,35,36,"dirtyDate"],[13,47,35,26],[13,49,35,47],[14,0,36,4],[14,10,36,8,"currentDate"],[14,21,36,19],[14,24,36,22,"parse"],[14,29,36,27],[14,30,36,28,"dirtyDate"],[14,39,36,27],[14,40,36,4],[15,0,37,4],[15,10,37,8,"distance"],[15,18,37,16],[15,21,37,19,"Math"],[15,25,37,23],[15,26,37,24,"abs"],[15,29,37,19],[15,30,37,28,"timeToCompare"],[15,43,37,41],[15,46,37,44,"currentDate"],[15,57,37,55],[15,58,37,56,"getTime"],[15,65,37,44],[15,67,37,19],[15,68,37,4],[17,0,38,4],[17,10,38,8,"result"],[17,16,38,14],[17,21,38,19,"undefined"],[17,30,38,8],[17,34,38,32,"distance"],[17,42,38,40],[17,45,38,43,"minDistance"],[17,56,38,4],[17,58,38,56],[18,0,39,6,"result"],[18,8,39,6,"result"],[18,14,39,12],[18,17,39,15,"currentDate"],[18,28,39,6],[19,0,40,6,"minDistance"],[19,8,40,6,"minDistance"],[19,19,40,17],[19,22,40,20,"distance"],[19,30,40,6],[20,0,41,5],[21,0,42,3],[21,5,35,2],[22,0,44,2],[22,11,44,9,"result"],[22,17,44,2],[23,0,45,1],[25,0,47,0,"module"],[25,2,47,0,"module"],[25,8,47,6],[25,9,47,7,"exports"],[25,16,47,0],[25,19,47,17,"closestTo"],[25,28,47,0]]},"type":"js/module"}]}